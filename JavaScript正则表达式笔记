正则表达式由两种基本字符类型组成：
1、原义文本字符(代表它本来含义的字符)

2、元字符(有特殊含义的非字母字符)：
  \t  水平制表符
  \v  垂直制表符
  \n  换行符
  \r  回车符
  \0  空字符
  \f  换页符
  \cX 与X对应的控制字符（Ctrl + X）
  g   匹配全文
  m   多行匹配（把换行符也当作新的一行）
  i   忽略大小写
  \
  字符类：
    []  构建一个简单的类（符合某些特性的对象，一个泛指，而不是特指某个字符）。
        如，[abc]把字符a、b、c归为一类，表达式可以匹配这类的字符（查找方括号之间的任何字符。）

    ^   字符类取反：创建反向类/负向类
        如，[^abc]表示不是字符a、b、c的内容
      
  范围类：
    -   与[]一起用，连接两个字符为一个区间，闭区间
        如，[a-z]表示从a到z的任意字符，包含a、z本身
        在[]组成的类内部是可以连写的
        如，[a-zA-Z]表示从a-z与从A-Z的任意字符
        若要匹配'-'则在最后加上'-'即可
        如，[a-z-]
      
  预定义类：
    .  除了回车符和换行符之外的所有字符==[^\r\n]
    \d  数字字符==[0-9]
    \D  非数字字符==[^0-9]
    \s  空白字符==[\t\n\x0B\f\r]
    \S  非空白字符==[^\t\n\x0B\f\r]
    \w  单词字符（数字、字母、下划线）==[a-zA-Z_0-9]
    \W  非单词字符==[^a-zA-Z_0-9]
    边界：
    ^   以xxx开始；如，/^@./g：以@开头的任意一个字符
    $   以XXX结束
    \b  单词边界（单词前后有空格），如，\bis\b：匹配is单词，包含'i''s'两个字母的单词不在匹配列
    \B  非单词边界
  量词：
    ？  出现零次或一次（最多出现一次）
    +   出现一次或多次（至少出现一次）
    *   出现零次或多次（任意次）
    {n} 出现n次
    {n,m} 出现n到m次
    {n,}  至少出现n次
      (默认贪婪模式：正则表达式在处理的时候会尽可能多的匹配，直到匹配失败)
      (非贪婪模式：让正则表达式尽可能少的匹配，做法：在量词后加上?，如，/\d{3,5}?/)
  分组：
    ()  达到分组的功能，可以使量词作用于分组
      如，(Byron){3}使整个Byron单词重复3遍
  或：
    |   达到或的效果
      如，Byr(on|Ca)sper
  反向引用：
    $n  引用()形成的第n个分组
  忽略分组：
  (?:)  分组不能被反向引用；如，(?:Byron).(ok)
